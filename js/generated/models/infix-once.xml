<model:model xmlns:model="local:model">
$identify("org/mathdox/formulaeditor/modules/<model:cd/>/<model:name/>.js");

$require("org/mathdox/parsing/ParserGenerator.js");
$require("org/mathdox/formulaeditor/parsing/openmath/OpenMathParser.js");
$require("org/mathdox/formulaeditor/parsing/expression/ExpressionContextParser.js");
$require("org/mathdox/formulaeditor/semantics/MultaryOperation.js");
$require("org/mathdox/formulaeditor/semantics/Keyword.js");
$require("org/mathdox/formulaeditor/parsing/openmath/KeywordList.js");

$main(function(){

  var symbol = {
    onscreen : "<model:symbol_screen/>",
    openmath : null, // use default with model:cd and model:name
    mathml   : "&lt;mo&gt;<model:symbol_mathml/>&lt;/mo&gt;"
  };

  /**
   * Define a semantic tree node that represents <model:cd/>.<model:name/>.
   */
  org.mathdox.formulaeditor.semantics.<model:cd capitalize="true"/><model:name capitalize="true"/> =
    $extend(org.mathdox.formulaeditor.semantics.MultaryOperation, {

      symbol : {

        onscreen : symbol.onscreen,
        openmath : "&lt;OMS cd='<model:cd/>' name='<model:name/>'/>",
        mathml   : symbol.mathml

      },

      associative : <model:associative/>,
      precedence : <model:precedence/>

    });
  
  /**
   * Extend the OpenMathParser object with parsing code for <model:cd/>.<model:name/>.
   */
  org.mathdox.formulaeditor.parsing.openmath.OpenMathParser =
    $extend(org.mathdox.formulaeditor.parsing.openmath.OpenMathParser, {

    /**
     * Returns an equality object based on the OpenMath node.
     */
    handle<model:cd capitalize="true"/><model:name capitalize="true"/> : function(node) {

      // parse the children of the OMA
      var children = node.childNodes;
      var operands = [];
      for (var i=1; i&lt;children.length; i++) {
        operands.push(this.handle(children.item(i)));
      }

      // construct the corresponding object
      var result = new org.mathdox.formulaeditor.semantics.<model:cd capitalize="true"/><model:name capitalize="true"/>();
      result.initialize.apply(result, operands);

      return result;

    }

  });

  org.mathdox.formulaeditor.parsing.openmath.KeywordList["<model:cd/>__<model:name/>"] = new org.mathdox.formulaeditor.semantics.Keyword("<model:cd/>", "<model:name/>", symbol, "infix");

  /**
   * Add the parsing code for an infix-once symbol.
   */
  var semantics = org.mathdox.formulaeditor.semantics;
  var pG = new org.mathdox.parsing.ParserGenerator();

  if ( "<model:symbol_enter/>" == "<model:symbol_screen/>" ) {
    // only one expression, same on screen
    org.mathdox.formulaeditor.parsing.expression.ExpressionContextParser.addFunction( 
      function(context) { return {

      // expression<model:precedence/> = <model:name/> | super.expression<model:precedence/>
      expression<model:precedence/> : function() {
        var parent = arguments.callee.parent;
        pG.alternation(
          pG.rule("<model:cd/><model:name/>"),
          parent.expression<model:precedence/>).apply(this, arguments);
      },

      // <model:cd/><model:name/> = 
      //    expression<model:precedence/> "<model:symbol_enter/>" expression<model:precedence2/>
      <model:cd/><model:name/> : function() {
          var parent = arguments.callee.parent;
          return pG.transform(
            pG.concatenation(
              pG.rule("expression<model:precedence/>"),
              pG.literal("<model:symbol_enter/>"),
              pG.rule("expression<model:precedence2/>")
            ),
            function(result) {
              return parent.infix_Update(new semantics.<model:cd capitalize="true"/><model:name capitalize="true"/>(result[0], result[2]));
            }
          ).apply(this, arguments);
        }
      };
    });
  } else { // allow alternative as displayed on the screen
    org.mathdox.formulaeditor.parsing.expression.ExpressionContextParser.addFunction( 
      function(context) { return {

      // expression<model:precedence/> = <model:cd/><model:name/> | 
      //   super.expression<model:precedence/>
      expression<model:precedence/> : function() {
        var parent = arguments.callee.parent;
        pG.alternation(
          pG.rule("<model:cd/><model:name/>"),
          parent.expression<model:precedence/>).apply(this, arguments);
      },

      // <model:cd/><model:name/> = 
      //    expression<model:precedence/> ("<model:symbol_enter/>"|"<model:symbol_screen/>") expression<model:precedence2/>
      <model:cd/><model:name/> : function() {
          var parent = arguments.callee.parent;
          return pG.transform(
            pG.concatenation(
              pG.rule("expression<model:precedence/>"),
  	    pG.alternation(
  	      pG.literal("<model:symbol_enter/>"),
  	      pG.literal("<model:symbol_screen/>")
  	    ),
              pG.rule("expression<model:precedence2/>")
            ),
            function(result) {
              return parent.infix_Update(new semantics.<model:cd capitalize="true"/><model:name capitalize="true"/>(result[0], result[2]));
            }
          ).apply(this, arguments);
        }
      };
    });
  }
});
</model:model>
