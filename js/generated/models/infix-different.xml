<model:model xmlns:model="local:model">
$identify("org/mathdox/formulaeditor/modules/<model:binary_cd/>/<model:binary_name/>.js");

$require("org/mathdox/parsing/ParserGenerator.js");
$require("org/mathdox/formulaeditor/parsing/openmath/OpenMathParser.js");
$require("org/mathdox/formulaeditor/parsing/expression/ExpressionContextParser.js");
$require("org/mathdox/formulaeditor/semantics/MultaryOperation.js");
$require("org/mathdox/formulaeditor/semantics/Keyword.js");

$main(function(){

  var symbol = {
    onscreen : "<model:symbol_screen/>",
    openmath : null, // use default with cd and name from model
    mathml   : "&lt;mo&gt;<model:symbol_mathml/>&lt;/mo&gt;"
  };

  /**
   * Define a semantic tree node that represents <model:binary_cd/>.<model:binary_name/>.
   */
  org.mathdox.formulaeditor.semantics.<model:binary_cd capitalize="true"/><model:binary_name capitalize="true"/> =
    $extend(org.mathdox.formulaeditor.semantics.MultaryOperation, {

      symbol : {

        onscreen : symbol.onscreen,
        openmath : "&lt;OMS cd='<model:binary_cd/>' name='<model:binary_name/>'/>",
        mathml   : symbol.mathml

      },

      precedence : <model:precedence/>

    });
 
  /**
   * Define a semantic tree node that represents <model:nary_cd/>.<model:nary_name/>.
   */
  org.mathdox.formulaeditor.semantics.<model:nary_cd capitalize="true"/><model:nary_name capitalize="true"/> =
    $extend(org.mathdox.formulaeditor.semantics.MultaryOperation, {

      symbol : {

        onscreen : symbol.onscreen,
        openmath : "&lt;OMS cd='<model:nary_cd/>' name='<model:nary_name/>'/>",
        mathml   : symbol.mathml

      },

      precedence : <model:precedence/>

    });
  
  /**
   * Extend the OpenMathParser object with parsing code for 
   * <model:binary_cd/>.<model:binary_name/> and <model:nary_cd/>.<model:nary_name/>.
   */
  org.mathdox.formulaeditor.parsing.openmath.OpenMathParser =
    $extend(org.mathdox.formulaeditor.parsing.openmath.OpenMathParser, {

    /**
     * Returns an equality object based on the OpenMath node.
     */
    handle<model:binary_cd capitalize="true"/><model:binary_name capitalize="true"/> : function(node) {

      // parse the children of the OMA
      var children = node.childNodes;
      var operands = [];
      for (var i=1; i&lt;children.length; i++) {
        operands.push(this.handle(children.item(i)));
      }

      // construct the corresponding object
      var result = new org.mathdox.formulaeditor.semantics.<model:binary_cd capitalize="true"/><model:binary_name capitalize="true"/>();
      result.initialize.apply(result, operands);
      return result;

    },
    handle<model:nary_cd capitalize="true"/><model:nary_name capitalize="true"/> : function(node) {

      // parse the children of the OMA
      var children = node.childNodes;
      var operands = [];
      for (var i=1; i&lt;children.length; i++) {
        operands.push(this.handle(children.item(i)));
      }

      // construct the corresponding object
      var result = new org.mathdox.formulaeditor.semantics.<model:nary_cd capitalize="true"/><model:nary_name capitalize="true"/>();
      result.initialize.apply(result, operands);
      return result;

    }


  });

  org.mathdox.formulaeditor.parsing.openmath.KeywordList["<model:binary_cd/>__<model:binary_name/>"] = new org.mathdox.formulaeditor.semantics.Keyword("<model:binary_cd/>", "<model:binary_name/>", symbol, "infix");
  org.mathdox.formulaeditor.parsing.openmath.KeywordList["<model:nary_cd/>__<model:nary_name/>"] = new org.mathdox.formulaeditor.semantics.Keyword("<model:nary_cd/>", "<model:nary_name/>", symbol, "infix");

  /**
   * Add the parsing code for an infix-different symbol.
   */
  var semantics = org.mathdox.formulaeditor.semantics;
  var pG = new org.mathdox.parsing.ParserGenerator();

  if ( "<model:symbol_enter/>" == "<model:symbol_screen/>" ) {
    // only one expression, same on screen
  org.mathdox.formulaeditor.parsing.expression.ExpressionContextParser.addFunction( 
    function(context) { return {

      // expression<model:precedence/> = <model:binary_cd/><model:binary_name/><model:nary_cd/><model:nary_name/> | super.expression<model:precedence/>
      expression<model:precedence/> : function() {
        var parent = arguments.callee.parent;
        pG.alternation(
          pG.rule("<model:binary_cd/><model:binary_name/><model:nary_cd/><model:nary_name/>"),
          parent.expression<model:precedence/>).apply(this, arguments);
      },

      // <model:binary_cd/><model:binary_name/><model:nary_cd/><model:nary_name/> = 
      //    expression<model:precedence/> "<model:symbol_enter/>" expression<model:precedence2/>
      <model:binary_cd/><model:binary_name/><model:nary_cd/><model:nary_name/> :
        pG.transform(
          pG.concatenation(
            pG.rule("expression<model:precedence/>"),
            pG.literal("<model:symbol_enter/>"),
            pG.rule("expression<model:precedence2/>"),
            pG.repetition(
              pG.concatenation(
                pG.literal("<model:symbol_enter/>"),
                pG.rule("expression<model:precedence2/>")
              )
            )
          ),
          function(result) {
	    var retval;
            var operands = [];
            var i;

            if ((result[0] instanceof semantics.<model:binary_cd capitalize="true"/><model:binary_name capitalize="true"/>) ||
                (result[0] instanceof semantics.<model:binary_cd capitalize="true"/><model:binary_name capitalize="true"/>)) {

              retval = new semantics.<model:nary_cd capitalize="true"/><model:nary_name capitalize="true"/>();
              for (i=0; i&lt;result[0].operands.length;i++) {
	        operands.push(result[0].operands[i]);
              }
	    } else {
              retval = new semantics.<model:binary_cd capitalize="true"/><model:binary_name capitalize="true"/>();
	      operands.push(result[0]);
            }

            for (i=1; 2*i&lt;result.length; i++) {
              operands.push(result[2*i]);
            }
            retval.operands = operands;

            return retval;
          }
        )
      };
    });
  } else { // allow alternative as displayed on the screen
  org.mathdox.formulaeditor.parsing.expression.ExpressionContextParser.addFunction( 
    function(context) { return {

      // expression<model:precedence/> = <model:binary_cd/><model:binary_name/><model:nary_cd/><model:nary_name/> | 
      //   super.expression<model:precedence/>
      expression<model:precedence/> : function() {
        var parent = arguments.callee.parent;
        pG.alternation(
          pG.rule("<model:binary_cd/><model:binary_name/><model:nary_cd/><model:nary_name/>"),
          parent.expression<model:precedence/>).apply(this, arguments);
      },

      // <model:binary_cd/><model:binary_name/><model:nary_cd/><model:nary_name/> = 
      //    expression<model:precedence/> "<model:symbol_enter/>" expression<model:precedence2/>
      <model:binary_cd/><model:binary_name/><model:nary_cd/><model:nary_name/> :
        pG.transform(
          pG.concatenation(
            pG.rule("expression<model:precedence/>"),
	    pG.alternation(
	      pG.literal("<model:symbol_enter/>"),
	      pG.literal("<model:symbol_screen/>")
	    ),
            pG.rule("expression<model:precedence2/>"),
            pG.repetition(
              pG.concatenation(
	        pG.alternation(
	          pG.literal("<model:symbol_enter/>"),
	          pG.literal("<model:symbol_screen/>")
	        ),
                pG.rule("expression<model:precedence2/>")
              )
            )
          ),
          function(result) {
            var retval;
	    if (result.length &lt; 3){
              retval = new semantics.<model:binary_cd capitalize="true"/><model:binary_name capitalize="true"/>();
	    } else {
              retval = new semantics.<model:nary_cd capitalize="true"/><model:nary_name capitalize="true"/>();
	    }
            var operands = [];
            var i;

            for (i=0; 2*i&lt;result.length; i++) {
              operands[i] = result[2*i];
            }
            retval.operands = operands;

            return retval;
          }
        )
      };
    });
  }
});
</model:model>
